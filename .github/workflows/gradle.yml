# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

# 트리거 설정
on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

# 환경변수 설정
env:
  ZIP_FILE_NAME: superTime
  AWS_DEFAULT_REGION: ap-northeast-2c

# 작업 정의
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # yml파일 설정
      - name: Set Yaml
        env:
          SECRET_YML: ${{ secrets.SECRET_YML }}
          SECRET_YML_DIR: ./src/main/resources
          SECRET_YML_DIR_FILE_NAME: application-dev.yml
        run: echo $SECRET_YML | base64 --decode > $SECRET_YML_DIR/$SECRET_YML_DIR_FILE_NAME

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # pull_request event triger
      - name: Build for Pull Request
        if: github.event_name == 'pull_request'
        run: ./gradlew clean build

      # push event triger
      - name: Build for Push
        if: github.event_name == 'push'
        run: ./gradlew clean build

      # 디렉토리 생성
      - name: Make Directory
        run: mkdir -p deploy

      # Jar 파일 복사
      - name: Copy Jar
        run: cp ./build/libs/*.jar ./deploy

      # appspec.yml 파일 복사
      - name: Copy appspec.yml
        run: cp appspec.yml ./deploy

      # script files 복사
      - name: Copy script
        run: cp ./scripts/*.sh ./deploy

      - name: Make zip file
        run: zip -r ./$ZIP_FILE_NAME.zip ./deploy
        shell: bash

  deploy:
    needs: build

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: $AWS_DEFAULT_REGION

      - name: Upload to S3
        if: github.event_name == 'push'
        run: aws s3 cp --region $AWS_DEFAULT_REGION ./$ZIP_FILE_NAME.zip s3://${{ secrets.AWS_S3_CODE_BUCKET_NAME }}

      - name: Deploy
        if: github.event_name == 'push'
        shell: /usr/bin/bash -e {0}
        env:
          S3_BUCKET_NAME: ${{ secrets.AWS_S3_CODE_BUCKET_NAME }}
          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.9-9/x64
          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.9-9/x64
          AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION
          AWS_REGION: $AWS_DEFAULT_REGION
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws deploy create-deployment \
          --application-name ${{ secrets.AWS_CODEDEPLOY_APPLICATION_NAME }} \
          --deployment-group-name ${{ secrets.AWS_CODEDEPLOY_GROUP_NAME }} \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=${{ secrets.AWS_S3_CODE_BUCKET_NAME }},bundleType=zip,key=$ZIP_FILE_NAME.zip \
          --region $AWS_REGION
